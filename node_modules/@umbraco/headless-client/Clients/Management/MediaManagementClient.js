"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaManagementClient = void 0;
var Endpoints_1 = require("../../Endpoints");
/**
 * MediaManagementClient is used to access the Media part of the Content Management API.
 * @public
 *
 * @example
 * The {@link MediaManagementClient} must be accessed through {@link Client}.
 *
 * ```typescript
 * import { Client } from '@umbraco/headless-client'
 *
 * const client = new Client({
 *  projectAlias: '<your-project-alias>',
 *  apiKey: '<your-api-key>',
 *  language: '<iso-code>',
 * })
 *
 * const mediaClient = client.management.media
 * ```
 */
var MediaManagementClient = /** @class */ (function () {
    /**
     * @internal
     */
    function MediaManagementClient(client) {
        var _this = this;
        this.client = client;
        this.makeRequest = function (endpoint, data) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.client.makeRequest(endpoint, data)];
            });
        }); };
    }
    /**
     * Fetch all media at the root of the tree, which the authorized user has access to according to the 'Start node'-permissions.
     * @returns a `Promise` that resolves to an array of {@link ContentManagementMedia}.
     */
    MediaManagementClient.prototype.root = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.makeRequest(Endpoints_1.Endpoints.management.media.root())];
            });
        });
    };
    /**
     * Fetch a single media item by its id.
     * @param id - GUID id of the Media item
     * @returns a `Promise` that resolves to a {@link ContentManagementMedia} if found, otherwise `undefined`.
     */
    MediaManagementClient.prototype.byId = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.media.byId(id))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_1 = _a.sent();
                        if (err_1.response && err_1.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetch all children of a Media item.
     * @param id - GUID id of the Media item
     * @param options - Request options. See {@link APIMediaChildrenOptions}.
     * @returns a `Promise` that resolves to a {@link PagedResponse} of {@link ContentManagementMedia} if found, otherwise `undefined`.
     */
    MediaManagementClient.prototype.children = function (id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.media.children(id, options))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_2 = _a.sent();
                        if (err_2.response && err_2.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_2;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create a new Media item.
     * @param body - The Media to create. See {@link ContentManagementMediaRequest}.
     * @returns a `Promise` that resolves to the newly created {@link ContentManagementMedia}.
     *
     * @example
     * ```typescript
     * const media = await client.management.media.create({
     *  name: '<name>',
     *  mediaTypeAlias: '<media-type-alias>',
     *  parentId: '<parentId|undefined>',
     * })
     * ```
     *
     * If the Media Type includes an `Upload` or an `Image Cropper` property and you want to upload a file you need to pass a `FormData` object to the function instead,
     *
     * ```typescript
     * import FormData from `form-data`
     * import fs from 'fs'
     * import path from 'path'
     *
     * const data = new FormData()
     *
     * data.append(JSON.stringify({
     *  name: '<name>',
     *  mediaTypeAlias: '<media-type-alias>',
     *  parentId: '<parentId|undefined>',
     *  // if myFile is of type `Upload`
     *  myFile: 'my-file.txt',
     *  // if myImage is of type `Image Cropper`
     *  myImage: { src: 'my-image.jpg', },
     * }))
     *
     * data.append('myFile', fs.createReadStream(path.join(__dirname, 'my-file.txt')))
     * data.append('myImage', fs.createReadStream(path.join(__dirname, 'my-image.txt')))
     *
     * const media = await client.management.media.create(data)
     * ```
     *
     * See {@link https://our.umbraco.com/documentation/Umbraco-Heartcore/API-Documentation/Content-Management/media/#create-content} for more info on the structure of the document.
     */
    MediaManagementClient.prototype.create = function (body) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.makeRequest(Endpoints_1.Endpoints.management.media.create(), body)];
            });
        });
    };
    /**
     * Update a Media item.
     * @param id - GUID id of the Content item.
     * @param body - Media to update. See {@link ContentManagementMediaRequest}.
     * @returns a `Promise` that resolves to a {@link ContentManagementMedia} of the updated Media item if found, otherwise `undefined`.
     *
     * @example
     * ```typescript
     * const media = await client.management.media.update('<media-id>', {
     *  name: '<name>',
     *  mediaTypeAlias: '<media-type-alias>',
     *  parentId: '<parentId|undefined>',
     * })
     * ```
     *
     * If the Media Type includes an `Upload` or an `Image Cropper` property and you want to upload a file you need to pass a `FormData` object to the function instead,
     *
     * ```typescript
     * import FormData from `form-data`
     * import fs from 'fs'
     * import path from 'path'
     *
     * const data = new FormData()
     *
     * data.append(JSON.stringify({
     *  name: '<name>',
     *  mediaTypeAlias: '<media-type-alias>',
     *  parentId: '<parentId|undefined>',
     *  // if myFile is of type `Upload`
     *  myFile: 'my-file.txt',
     *  // if myImage is of type `Image Cropper`
     *  myImage: { src: 'my-image.jpg', },
     * }))
     *
     * data.append('myFile', fs.createReadStream(path.join(__dirname, 'my-file.txt')))
     * data.append('myImage', fs.createReadStream(path.join(__dirname, 'my-image.txt')))
     *
     * const media = await client.management.media.update('<media-id>', data)
     * ```
     *
     * See {@link https://our.umbraco.com/documentation/Umbraco-Heartcore/API-Documentation/Content-Management/media/#update-media} for more info on the structure of the document.
     */
    MediaManagementClient.prototype.update = function (id, body) {
        return __awaiter(this, void 0, void 0, function () {
            var err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.media.update(id), body)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_3 = _a.sent();
                        if (err_3.response && err_3.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete a Media item.
     * @param id - GUID id of the Media item.
     * @returns a `Prommise` that resolves to a {@link ContentManagementMedia} of the deleted Media item if found', otherwise `undefined`.
     */
    MediaManagementClient.prototype.delete = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.media.delete(id))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_4 = _a.sent();
                        if (err_4.response && err_4.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_4;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return MediaManagementClient;
}());
exports.MediaManagementClient = MediaManagementClient;
//# sourceMappingURL=data:application/json;base64,