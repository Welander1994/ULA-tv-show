"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentManagementClient = void 0;
var Endpoints_1 = require("../../Endpoints");
/**
 * ContentManagementClient is used to access the Content part of the Content Management API.
 * @public
 *
 * @example
 * The {@link ContentManagementClient} must be accessed through {@link Client}.
 *
 * ```typescript
 * import { Client } from '@umbraco/headless-client'
 *
 * const client = new Client({
 *  projectAlias: '<your-project-alias>',
 *  apiKey: '<your-api-key>',
 *  language: '<iso-code>',
 * })
 *
 * const contentClient = client.management.content
 * ```
 */
var ContentManagementClient = /** @class */ (function () {
    /**
     * @internal
     */
    function ContentManagementClient(client) {
        var _this = this;
        this.client = client;
        this.makeRequest = function (endpoint, data) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.client.makeRequest(endpoint, data)];
            });
        }); };
    }
    /**
     * Fetch all content at the root of the tree, which the authorized user has access to according to the 'Start node'-permissions.
     * @returns a `Promise` that resolves to an array of {@link ContentManagementContent},
     */
    ContentManagementClient.prototype.root = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.makeRequest(Endpoints_1.Endpoints.management.content.root())];
            });
        });
    };
    /**
     * Fetch a single Content item by its id.
     * @param id - GUID id of the Content item.
     * @returns a `Promise` that resolves to a {@link ContentManagementContent} if found, otherwise `undefined`.
     */
    ContentManagementClient.prototype.byId = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.content.byId(id))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_1 = _a.sent();
                        if (err_1.response && err_1.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetch all children of a Content item.
     * @param id - GUID id of the Content item.
     * @param options - Request options. See {@link APIContentChildrenOptions}.
     * @returns a `Promise` that resolves to a {@link PagedResponse} of {@link ContentManagementContent} if found, otherwise `undefined`.
     */
    ContentManagementClient.prototype.children = function (id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.content.children(id, options))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_2 = _a.sent();
                        if (err_2.response && err_2.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_2;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create a new Content item.
     * @param body - The Content to create. See {@link ContentManagementContentRequest}.
     * @returns a `Promise` that resolves to the newly created {@link ContentManagementContent}.
     *
     * @example
     * ```typescript
     * const content = await client.management.content.create({
     *  name: {
     *    $invariant: '<name>',
     *  },
     *  contentTypeAlias: '<content-type-alias>',
     *  parentId: '<parentId|undefined>',
     * })
     * ```
     *
     * If the Content Type includes an `Upload` or an `Image Cropper` property and you want to upload a file you need to pass a `FormData` object to the function instead,
     *
     * ```typescript
     * import FormData from `form-data`
     * import fs from 'fs'
     * import path from 'path'
     *
     * const data = new FormData()
     *
     * data.append(JSON.stringify({
     *  name: {
     *    $invariant: '<name>',
     *  },
     *  contentTypeAlias: '<content-type-alias>',
     *  parentId: '<parentId|undefined>',
     *  // if myFile is of type `Upload` and is culture variant
     *  myFile: {
     *    'en-US': 'my-file.txt',
     *  },
     *  // if myImage is of type `Image Cropper` and is culture invariant
     *  myImage: {
     *    $invariant: {
     *      src: 'my-image.jpg',
     *    },
     *  },
     * }))
     *
     * data.append('myFile.en-US', fs.createReadStream(path.join(__dirname, 'my-file.txt')))
     * data.append('myImage.$invariant', fs.createReadStream(path.join(__dirname, 'my-image.txt')))
     *
     * const content = await client.management.content.create(data)
     * ```
     *
     * See {@link https://our.umbraco.com/documentation/Umbraco-Heartcore/API-Documentation/Content-Management/content/#create-content} for more info on the structure of the document.
     */
    ContentManagementClient.prototype.create = function (body) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.makeRequest(Endpoints_1.Endpoints.management.content.create(), body)];
            });
        });
    };
    /**
     * Publish a Content item.
     * @param id - GUID id of the Content item.
     * @param options - Request options. See {@link APIContentPublishOptions}.
     * @returns a `Promise` that resolves to a {@link ContentManagementContent} if found, otherwise `undefined`.
     */
    ContentManagementClient.prototype.publish = function (id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.content.publish(id, options))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_3 = _a.sent();
                        if (err_3.response && err_3.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Unpublish a Content item.
     * @param id - GUID id of the Content item.
     * @param options - Request options. See {@link APIContentPublishOptions}.
     * @returns a `Promise` that resolves to a {@link ContentManagementContent} if found, otherwise `undefined`.
     */
    ContentManagementClient.prototype.unPublish = function (id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.content.unPublish(id, options))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_4 = _a.sent();
                        if (err_4.response && err_4.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_4;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update a Content item.
     * @param id - GUID id of the Content item.
     * @param body - Content to update, must be a complete Content item including all cultures. See {@link ContentManagementContentRequest}.
     * @returns a `Promise` that resolves to a {@link ContentManagementContent} of the updated Content item if found, otherwise `undefined`.
     *
     * @example
     * ```typescript
     * const content = await client.management.content.update('<content-id>', {
     *  name: {
     *    $invariant: '<name>',
     *  },
     *  contentTypeAlias: '<content-type-alias>',
     *  parentId: '<parentId|undefined>',
     * })
     * ```
     *
     * If the Content Type includes an `Upload` or an `Image Cropper` property and you want to upload a file you need to pass a `FormData` object to the function instead,
     *
     * ```typescript
     * import FormData from `form-data`
     * import fs from 'fs'
     * import path from 'path'
     *
     * const data = new FormData()
     *
     * data.append(JSON.stringify({
     *  name: {
     *    $invariant: '<name>',
     *  },
     *  contentTypeAlias: '<content-type-alias>',
     *  parentId: '<parentId|undefined>',
     *  // if myFile is of type `Upload` and is culture variant
     *  myFile: {
     *    'en-US': 'my-file.txt',
     *  },
     *  // if myImage is of type `Image Cropper` and is culture invariant
     *  myImage: {
     *    $invariant: {
     *      src: 'my-image.jpg',
     *    },
     *  },
     * }))
     *
     * data.append('myFile.en-US', fs.createReadStream(path.join(__dirname, 'my-file.txt')))
     * data.append('myImage.$invariant', fs.createReadStream(path.join(__dirname, 'my-image.txt')))
     *
     * const content = await client.management.content.update('<content-id>', data)
     * ```
     *
     * See {@link https://our.umbraco.com/documentation/Umbraco-Heartcore/API-Documentation/Content-Management/content/#update-content} for more info on the structure of the document.
     */
    ContentManagementClient.prototype.update = function (id, body) {
        return __awaiter(this, void 0, void 0, function () {
            var err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.content.update(id), body)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_5 = _a.sent();
                        if (err_5.response && err_5.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_5;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete a Content item.
     * @param id - GUID id of the Content item.
     * @returns a `Promise` that resolves to a {@link ContentManagementContent} of the deleted Content item if found, otherwise `undefined`.
     */
    ContentManagementClient.prototype.delete = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.makeRequest(Endpoints_1.Endpoints.management.content.delete(id))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_6 = _a.sent();
                        if (err_6.response && err_6.response.status === 404) {
                            return [2 /*return*/, undefined];
                        }
                        throw err_6;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return ContentManagementClient;
}());
exports.ContentManagementClient = ContentManagementClient;
//# sourceMappingURL=data:application/json;base64,