"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
var Clients_1 = require("./Clients");
var ApiRequest_1 = require("./ApiRequest");
/**
 * Entry class for accessing the Content Delivery and Content Management APIs.
 * @public
 *
 * @example
 *
 * To get started you need create a new instance of the `Client` passing {@link ClientOptions}.
 *
 * ```typescript
 * import { Client } from '@umbraco/headless-client'
 *
 * const client = new Client({
 *  projectAlias: '<your-project-alias>',
 *  apiKey: '<your-api-key>',
 *  language: '<iso-code>',
 * })
 * ```
 *
 * You might want to proxy your request through a server to hide the project alias and the api key,
 * this can be done by creating a new instance of the `Client` class passing in {@link ProxyOptions}.
 *
 * ```typescript
 * import { Client } from '@umbraco/headless-client'
 *
 * const client = new Client({
 *  apiProxyUrl: '<proxy-url>',
 *  cdnProxyUrl: '<proxy-url>',
 *  language: '<iso-code>',
 * })
 * ```
 *
 */
var Client = /** @class */ (function () {
    /**
     * Constructs a new instance of the `Client` class with the given options.
     * @param options - The options. See {@link ClientOptions} or {@link ProxyOptions}.
     */
    function Client(options) {
        var _this = this;
        this.options = options;
        /**
         * Get Delivery client for fetching content and media from CDN.
         * See {@link DeliveryClient}
         */
        this.delivery = new Clients_1.DeliveryClient(this);
        /**
         * Get Manager Client for managing content on Umbraco Heartcore.
         * See {@link ManagementClient}
         */
        this.management = new Clients_1.ManagementClient(this);
        /**
         * Get Authentication Client for authenticating members and Backoffice users.
         * See {@link AuthenticationClient}
         */
        this.authentication = new Clients_1.AuthenticationClient(this);
        /**
         * Makes request from and [Endpoint]
         * @internal
         */
        this.makeRequest = function (endpoint, data) { return __awaiter(_this, void 0, void 0, function () {
            var response, items, pageData, _embedded, _links, data_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new ApiRequest_1.ApiRequest(this.options, endpoint, data).promise()];
                    case 1:
                        response = _a.sent();
                        items = this.getEmbeddedData(response);
                        pageData = this.getPagedData(response);
                        if (pageData && items) {
                            return [2 /*return*/, __assign(__assign({}, pageData), { items: items })];
                        }
                        else if (!pageData && items) {
                            _embedded = response._embedded, _links = response._links, data_1 = __rest(response, ["_embedded", "_links"]);
                            if (Object.keys(data_1).length) {
                                return [2 /*return*/, __assign(__assign({}, _embedded), data_1)];
                            }
                            return [2 /*return*/, items];
                        }
                        return [2 /*return*/, response];
                }
            });
        }); };
        /**
         * Sets the API to be used.
         * @param apikey - API Key
         * @deprecated Use `apiKey` in the constructor options instead.
         */
        this.setAPIKey = function (apikey) {
            if ('apiKey' in _this.options) {
                _this.options.apiKey = apikey;
            }
            else {
                throw Error('Cannot set apiKey on ProxyOptions');
            }
        };
        /**
         * @deprecated Use `options.apiKey` instead.
         */
        this.getAPIKey = function () {
            if ('apiKey' in _this.options) {
                return _this.options.apiKey;
            }
            else {
                throw Error('Cannot set apiKey on ProxyOptions');
            }
        };
        this.getEmbeddedData = function (response) {
            if (Object.prototype.hasOwnProperty.call(response, '_embedded')) {
                var keys = Object.keys(response._embedded);
                var keyCount = keys.length;
                if (keyCount === 1) {
                    var key = keys[0];
                    return response._embedded[key];
                }
            }
            return null;
        };
        this.getPagedData = function (response) {
            var lookForProps = ['_totalItems', '_totalPages', '_page', '_pageSize'];
            var keys = Object.keys(response);
            for (var i = 0; i < lookForProps.length; i++) {
                var needle = lookForProps[i];
                if (!keys.includes(needle))
                    return null;
            }
            var object = {};
            lookForProps.forEach(function (key) {
                object[key.replace(/^_/, '')] = response[key];
            });
            return object;
        };
    }
    return Client;
}());
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,